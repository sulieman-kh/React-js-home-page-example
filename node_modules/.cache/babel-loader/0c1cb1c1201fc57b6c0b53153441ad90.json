{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var mountedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  var handleRef = useForkRef(children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(function (event) {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    var doc = ownerDocument(nodeRef.current); // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = function createHandleSynthetic(handlerName) {\n    return function (event) {\n      syntheticEventRef.current = true;\n      var childrenPropsHandler = children.props[handlerName];\n\n      if (childrenPropsHandler) {\n        childrenPropsHandler(event);\n      }\n    };\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = function handleTouchMove() {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;","map":{"version":3,"sources":["C:/Users/sulhk/node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js"],"names":["React","PropTypes","elementAcceptingRef","exactProp","ownerDocument","useForkRef","useEventCallback","mapEventPropToEvent","eventProp","substring","toLowerCase","clickedRootScrollbar","event","doc","documentElement","clientWidth","clientX","clientHeight","clientY","ClickAwayListener","props","children","_props$disableReactTr","disableReactTree","_props$mouseEvent","mouseEvent","onClickAway","_props$touchEvent","touchEvent","movedRef","useRef","nodeRef","mountedRef","syntheticEventRef","useEffect","current","handleRef","ref","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","undefined","mappedMouseEvent","createElement","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","bool","oneOf","func"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var mountedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  var handleRef = useForkRef(children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(function (event) {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    var doc = ownerDocument(nodeRef.current); // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = function createHandleSynthetic(handlerName) {\n    return function (event) {\n      syntheticEventRef.current = true;\n      var childrenPropsHandler = children.props[handlerName];\n\n      if (childrenPropsHandler) {\n        childrenPropsHandler(event);\n      }\n    };\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = function handleTouchMove() {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;"]},"metadata":{},"sourceType":"module"}