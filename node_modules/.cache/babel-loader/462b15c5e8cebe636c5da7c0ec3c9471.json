{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nvar Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      onRendered = props.onRendered;\n\n  var _React$useState = React.useState(null),\n      mountNode = _React$useState[0],\n      setMountNode = _React$useState[1];\n\n  var handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(function () {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(function () {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return function () {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(function () {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * The `children` will be inside the DOM hierarchy of the parent component.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","map":{"version":3,"sources":["C:/Users/sulhk/node_modules/@material-ui/core/esm/Portal/Portal.js"],"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","setRef","useForkRef","getContainer","container","useEnhancedEffect","window","useLayoutEffect","useEffect","Portal","forwardRef","props","ref","children","_props$disablePortal","disablePortal","onRendered","_React$useState","useState","mountNode","setMountNode","handleRef","isValidElement","document","body","undefined","cloneElement","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","func","bool"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nvar Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      onRendered = props.onRendered;\n\n  var _React$useState = React.useState(null),\n      mountNode = _React$useState[0],\n      setMountNode = _React$useState[1];\n\n  var handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(function () {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(function () {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return function () {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(function () {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * The `children` will be inside the DOM hierarchy of the parent component.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;"]},"metadata":{},"sourceType":"module"}